import { MailerService } from '@nestjs-modules/mailer';import { HttpStatus, Injectable } from '@nestjs/common';import { CustomException } from 'src/common/exceptions/custom.exception';import { FeedbackSubjectEnum } from '../../../common/enums/feedbackSubject.enum';import { SendFeedbackDto } from './dto/sendFeedback.dto';@Injectable()export class MailService {  constructor(private readonly mailerService: MailerService) {}  public async sendFeedback(dto: SendFeedbackDto): Promise<void> {    let textSubject: string;    let templateName: string;    if (dto.subject === FeedbackSubjectEnum.BUSINESS) {      textSubject = 'Предложение по бизнесу';      templateName = 'businessQuestion';    } else {      textSubject = 'Технический вопрос';      templateName = 'technicalQuestion';    }    return await this.sendMail(process.env.FEEDBACK_RECIPIENT, textSubject, templateName, dto);  }  public async sendConfirmationCode(userEmail: string, firstName: string, code: string): Promise<void> {    const textSubject = 'Подтверждение аккаунта';    const templateName = 'createUser';    const data = { code: code, firstName: firstName };    return await this.sendMail(userEmail, textSubject, templateName, data);  }  public async sendRecoverCode(userEmail: string, firstName: string, code: string): Promise<void> {    const textSubject = 'Восстановление пароля';    const templateName = 'recoverPassword';    const data = { code: code, firstName: firstName };    return await this.sendMail(userEmail, textSubject, templateName, data);  }  private async sendMail(recipient: string, textSubject: string, templateName: string, data: object): Promise<void> {    try {      await this.mailerService.sendMail({        to: recipient,        subject: textSubject,        template: templateName,        context: {          ...data,        },      });    } catch (error) {      throw new CustomException({        statusCode: HttpStatus.INTERNAL_SERVER_ERROR,      });    }  }}